{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b1ca1ac6-5c77-4485-bb96-9c81bc97189f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Project root added: C:\\Users\\Admin\\smart_qc_v2\n"
     ]
    }
   ],
   "source": [
    "import sys, os\n",
    "\n",
    "# ‚úÖ force Jupyter to recognize smartqc module\n",
    "project_root = os.path.abspath(os.path.join(os.getcwd(), \"..\"))\n",
    "sys.path.insert(0, project_root)\n",
    "\n",
    "print(f\"‚úÖ Project root added: {project_root}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0111e046-95cd-4572-b3e3-a95ee019f874",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9f814c19-cffc-49e4-9d55-84ea982a73b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'batch_size': 100000, 'random_state': 42, 'verbose': True, 'anomaly_detection': True, 'inf_handling': 'knn', 'columns_to_drop': [], 'scale_numeric': True, 'use_smote': True, 'smote_sampling_strategy': 0.5, 'auto_target_selection': False, 'target_column_names': [], 'time_series_threshold': 0.3, 'max_trials': 10, 'automl_timeout_minutes': 5}\n"
     ]
    }
   ],
   "source": [
    "import sys, os\n",
    "sys.path.insert(0, os.path.abspath(os.path.join(os.getcwd(), \"..\"))) #first priority in project root \n",
    "from smartqc.config import CONFIG\n",
    "print(CONFIG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "63cd3843-bcc3-4786-9e3d-69356b4785ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data loaded ‚Üí shape: (9999, 52)\n",
      "(9999, 52)\n",
      "   Id  L0_S0_F0  L0_S0_F2  L0_S0_F4  L0_S0_F6  L0_S0_F8  L0_S0_F10  L0_S0_F12  \\\n",
      "0   4     0.030    -0.034    -0.197    -0.179     0.118      0.116     -0.015   \n",
      "1   6       NaN       NaN       NaN       NaN       NaN        NaN        NaN   \n",
      "2   7     0.088     0.086     0.003    -0.052     0.161      0.025     -0.015   \n",
      "3   9    -0.036    -0.064     0.294     0.330     0.074      0.161      0.022   \n",
      "4  11    -0.055    -0.086     0.294     0.330     0.118      0.025      0.030   \n",
      "\n",
      "   L0_S0_F14  L0_S0_F16  ...  L0_S7_F142  L0_S8_F144  L0_S8_F146  L0_S8_F149  \\\n",
      "0     -0.032      0.020  ...       0.060      -0.157         0.0       0.001   \n",
      "1        NaN        NaN  ...         NaN         NaN         NaN         NaN   \n",
      "2     -0.072     -0.225  ...         NaN      -0.157         0.0       0.001   \n",
      "3      0.128     -0.026  ...      -0.015       0.343         0.0       0.001   \n",
      "4      0.168     -0.169  ...       0.014      -0.157         0.0       0.001   \n",
      "\n",
      "   L0_S9_F155  L0_S9_F160  L0_S9_F165  L0_S9_F170  L0_S9_F175  L0_S9_F180  \n",
      "0         NaN         NaN         NaN         NaN         NaN         NaN  \n",
      "1         NaN         NaN         NaN         NaN         NaN         NaN  \n",
      "2         NaN         NaN         NaN         NaN         NaN         NaN  \n",
      "3         NaN         NaN         NaN         NaN         NaN         NaN  \n",
      "4         NaN         NaN         NaN         NaN         NaN         NaN  \n",
      "\n",
      "[5 rows x 52 columns]\n"
     ]
    }
   ],
   "source": [
    "from smartqc.data_loader import DataLoader\n",
    "\n",
    "data_loader = DataLoader(\"../data/test_bosch.csv\")\n",
    "df = data_loader.df\n",
    "print(df.shape)\n",
    "data_loader.preview()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a801ee29-c471-485e-89fb-4827f8e97656",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Missing Value Audit:\n",
      "   Dataset Shape: (9999, 52)\n",
      "   Total Missing Cells: 320806\n",
      "   Missing %: 61.70%\n",
      "\n",
      "Dropping 34 columns with >50% missing values...\n",
      "Using KNNImputer (numeric columns only)...\n",
      "KNNImputer done. Non-numeric columns untouched: []\n",
      "\n",
      "Final dataset shape after missing handling: (9999, 18)\n",
      "(9999, 18)\n"
     ]
    }
   ],
   "source": [
    "from smartqc.missing_handler import MissingHandler\n",
    "\n",
    "mh = MissingHandler(data_loader.df)\n",
    "clean_df = mh.fix()\n",
    "print(clean_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fa7c55fa-4861-46f4-bed5-6128e9e51590",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Do you want to manually define sensor limits? (y/n):  n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Skipping manual outlier detection. Will proceed with automatic (if enabled).\n",
      "Data Quality Report:\n",
      "   Dataset Shape: (9999, 18)\n",
      "   Infinite values detected: 0\n",
      "Running automatic anomaly detection (Isolation Forest)...\n",
      "Automatic outliers flagged in 'is_outlier' column (1=outlier, 0=normal).\n",
      "   is_outlier    Id  L0_S0_F0  L0_S0_F2  L0_S0_F4  L0_S0_F6\n",
      "0           0   4.0     0.030   -0.0340   -0.1970   -0.1790\n",
      "1           0   6.0     0.006   -0.0158    0.1376    0.1482\n",
      "2           0   7.0     0.088    0.0860    0.0030   -0.0520\n",
      "3           0   9.0    -0.036   -0.0640    0.2940    0.3300\n",
      "4           0  11.0    -0.055   -0.0860    0.2940    0.3300\n"
     ]
    }
   ],
   "source": [
    "from smartqc.quality_monitor import get_user_sensor_limits, QualityMonitor\n",
    "\n",
    "manual_ranges = get_user_sensor_limits(clean_df)  # ‚Üê system asks user Y/N\n",
    "qm = QualityMonitor(clean_df, manual_outlier_ranges=manual_ranges)\n",
    "audited_df = qm.get_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "da32b343-6f56-454e-82fb-89852d30aba3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropdown confirm not working. Fallback to manual input.\n",
      "Columns available: ['Id', 'L0_S0_F0', 'L0_S0_F2', 'L0_S0_F4', 'L0_S0_F6', 'L0_S0_F8', 'L0_S0_F10', 'L0_S0_F12', 'L0_S0_F14', 'L0_S0_F16', 'L0_S0_F18', 'L0_S0_F20', 'L0_S0_F22', 'L0_S1_F24', 'L0_S1_F28', 'L0_S8_F144', 'L0_S8_F146', 'L0_S8_F149', 'is_outlier']\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your target column(s), comma-separated:  L0_S8_F149\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Target(s): ['L0_S8_F149']\n",
      "\n",
      "Generating synthetic features...\n",
      "   Using 18 numeric input columns.\n",
      "   Created 459 synthetic features.\n",
      "Filtering based on correlation to target(s)...\n",
      "14 features kept after filtering.\n",
      "Final dataset shape: (9999, 33)\n"
     ]
    }
   ],
   "source": [
    "from smartqc.defect_engineer import DefectEngineer\n",
    "\n",
    "de = DefectEngineer(audited_df)\n",
    "final_df, selected_targets = de.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5b46ad60-8ff9-48df-b7a3-8ebe034c79f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Auto-detecting ID-like and categorical columns...\n",
      "\n",
      "üßæ Proposed columns to drop: ['Id_x_L0_S8_F146', 'Id']\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Would you like to edit this list? (Y/N):  n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using auto drop list.\n",
      "\n",
      "Removing multicollinear features...\n",
      "   Dropped 8 highly correlated features.\n",
      "\n",
      "Scaling numeric features...\n",
      "   Scaled 22 features.\n",
      "\n",
      "Final shapes ‚Üí X: (9999, 22), y: (9999, 1)\n"
     ]
    }
   ],
   "source": [
    "from smartqc.preprocessor import Preprocessor\n",
    "\n",
    "pp = Preprocessor(final_df, selected_targets)\n",
    "X, y, features = pp.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bd5825a8-b2c5-4d62-9051-28b6e3a45729",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Checking for class imbalance...\n",
      "   Detected regression task ‚Üí skipping SMOTE.\n"
     ]
    }
   ],
   "source": [
    "from smartqc.smote_balancer import SMOTEBalancer\n",
    "\n",
    "sm = SMOTEBalancer(X, y)\n",
    "X_bal, y_bal = sm.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "73d5573a-c424-40f2-a067-e9a6f161b2ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detected task type: Regression\n"
     ]
    }
   ],
   "source": [
    "from smartqc.pipeline_router import PipelineRouter\n",
    "\n",
    "router = PipelineRouter(final_df, selected_targets)\n",
    "task_type = router.detect_task_type()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c4db66d3-c10c-41a7-8407-ab36d131f1c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking whether there is an H2O instance running at http://localhost:54321. connected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "\n",
       "#h2o-table-4.h2o-container {\n",
       "  overflow-x: auto;\n",
       "}\n",
       "#h2o-table-4 .h2o-table {\n",
       "  /* width: 100%; */\n",
       "  margin-top: 1em;\n",
       "  margin-bottom: 1em;\n",
       "}\n",
       "#h2o-table-4 .h2o-table caption {\n",
       "  white-space: nowrap;\n",
       "  caption-side: top;\n",
       "  text-align: left;\n",
       "  /* margin-left: 1em; */\n",
       "  margin: 0;\n",
       "  font-size: larger;\n",
       "}\n",
       "#h2o-table-4 .h2o-table thead {\n",
       "  white-space: nowrap; \n",
       "  position: sticky;\n",
       "  top: 0;\n",
       "  box-shadow: 0 -1px inset;\n",
       "}\n",
       "#h2o-table-4 .h2o-table tbody {\n",
       "  overflow: auto;\n",
       "}\n",
       "#h2o-table-4 .h2o-table th,\n",
       "#h2o-table-4 .h2o-table td {\n",
       "  text-align: right;\n",
       "  /* border: 1px solid; */\n",
       "}\n",
       "#h2o-table-4 .h2o-table tr:nth-child(even) {\n",
       "  /* background: #F5F5F5 */\n",
       "}\n",
       "\n",
       "</style>      \n",
       "<div id=\"h2o-table-4\" class=\"h2o-container\">\n",
       "  <table class=\"h2o-table\">\n",
       "    <caption></caption>\n",
       "    <thead></thead>\n",
       "    <tbody><tr><td>H2O_cluster_uptime:</td>\n",
       "<td>32 mins 51 secs</td></tr>\n",
       "<tr><td>H2O_cluster_timezone:</td>\n",
       "<td>Asia/Seoul</td></tr>\n",
       "<tr><td>H2O_data_parsing_timezone:</td>\n",
       "<td>UTC</td></tr>\n",
       "<tr><td>H2O_cluster_version:</td>\n",
       "<td>3.46.0.7</td></tr>\n",
       "<tr><td>H2O_cluster_version_age:</td>\n",
       "<td>1 month and 19 days</td></tr>\n",
       "<tr><td>H2O_cluster_name:</td>\n",
       "<td>H2O_from_python_Admin_zayl4q</td></tr>\n",
       "<tr><td>H2O_cluster_total_nodes:</td>\n",
       "<td>1</td></tr>\n",
       "<tr><td>H2O_cluster_free_memory:</td>\n",
       "<td>7.863 Gb</td></tr>\n",
       "<tr><td>H2O_cluster_total_cores:</td>\n",
       "<td>16</td></tr>\n",
       "<tr><td>H2O_cluster_allowed_cores:</td>\n",
       "<td>16</td></tr>\n",
       "<tr><td>H2O_cluster_status:</td>\n",
       "<td>locked, healthy</td></tr>\n",
       "<tr><td>H2O_connection_url:</td>\n",
       "<td>http://localhost:54321</td></tr>\n",
       "<tr><td>H2O_connection_proxy:</td>\n",
       "<td>{\"http\": null, \"https\": null}</td></tr>\n",
       "<tr><td>H2O_internal_security:</td>\n",
       "<td>False</td></tr>\n",
       "<tr><td>Python_version:</td>\n",
       "<td>3.10.16 final</td></tr></tbody>\n",
       "  </table>\n",
       "</div>\n"
      ],
      "text/plain": [
       "--------------------------  -----------------------------\n",
       "H2O_cluster_uptime:         32 mins 51 secs\n",
       "H2O_cluster_timezone:       Asia/Seoul\n",
       "H2O_data_parsing_timezone:  UTC\n",
       "H2O_cluster_version:        3.46.0.7\n",
       "H2O_cluster_version_age:    1 month and 19 days\n",
       "H2O_cluster_name:           H2O_from_python_Admin_zayl4q\n",
       "H2O_cluster_total_nodes:    1\n",
       "H2O_cluster_free_memory:    7.863 Gb\n",
       "H2O_cluster_total_cores:    16\n",
       "H2O_cluster_allowed_cores:  16\n",
       "H2O_cluster_status:         locked, healthy\n",
       "H2O_connection_url:         http://localhost:54321\n",
       "H2O_connection_proxy:       {\"http\": null, \"https\": null}\n",
       "H2O_internal_security:      False\n",
       "Python_version:             3.10.16 final\n",
       "--------------------------  -----------------------------"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[INFO] Preparing data for REGRESSION task...\n",
      "Parse progress: |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| (done) 100%\n",
      "[INFO] H2OFrame ready: 9999 rows, 23 columns.\n",
      "\n",
      "[INFO] Running H2O AutoML (regression) with sort_metric='RMSE'...\n",
      "AutoML progress: |‚ñà\n",
      "17:40:35.201: Project: AutoML_4_20250516_174035\n",
      "17:40:35.202: 5-fold cross-validation will be used.\n",
      "17:40:35.202: Setting stopping tolerance adaptively based on the training frame: 0.010000500037503125\n",
      "17:40:35.202: Build control seed: 42\n",
      "17:40:35.202: training frame: Frame key: AutoML_4_20250516_174035_training_Key_Frame__upload_a209638dd3520a34bafc05a219544d89.hex    cols: 23    rows: 9999  chunks: 2    size: 1057898  checksum: -2729957860537775709\n",
      "17:40:35.202: validation frame: NULL\n",
      "17:40:35.202: leaderboard frame: NULL\n",
      "17:40:35.202: blending frame: NULL\n",
      "17:40:35.202: response column: L0_S8_F149\n",
      "17:40:35.202: fold column: null\n",
      "17:40:35.202: weights column: null\n",
      "17:40:35.202: AutoML: XGBoost is not available; skipping it.\n",
      "17:40:35.202: Loading execution steps: [{XGBoost : [def_2 (1g, 10w), def_1 (2g, 10w), def_3 (3g, 10w), grid_1 (4g, 90w), lr_search (7g, 30w)]}, {GLM : [def_1 (1g, 10w)]}, {DRF : [def_1 (2g, 10w), XRT (3g, 10w)]}, {GBM : [def_5 (1g, 10w), def_2 (2g, 10w), def_3 (2g, 10w), def_4 (2g, 10w), def_1 (3g, 10w), grid_1 (4g, 60w), lr_annealing (7g, 10w)]}, {DeepLearning : [def_1 (3g, 10w), grid_1 (4g, 30w), grid_2 (5g, 30w), grid_3 (5g, 30w)]}, {completion : [resume_best_grids (6g, 60w)]}, {StackedEnsemble : [monotonic (9g, 10w), best_of_family_xglm (10g, 10w), all_xglm (10g, 10w)]}]\n",
      "17:40:35.202: Disabling Algo: XGBoost as requested by the user.\n",
      "17:40:35.203: AutoML job created: 2025.05.16 17:40:35.201\n",
      "17:40:35.203: AutoML build started: 2025.05.16 17:40:35.203\n",
      "17:40:35.203: AutoML: starting GLM_1_AutoML_4_20250516_174035 model training\n",
      "17:40:35.354: New leader: GLM_1_AutoML_4_20250516_174035, rmse: 0.0077053482272363\n",
      "17:40:35.355: AutoML: starting GBM_1_AutoML_4_20250516_174035 model training\n",
      "17:40:39.463: AutoML: starting DRF_1_AutoML_4_20250516_174035 model training\n",
      "\n",
      "‚ñà‚ñà\n",
      "17:40:42.256: New leader: DRF_1_AutoML_4_20250516_174035, rmse: 0.007404974081652545\n",
      "17:40:42.256: AutoML: starting GBM_2_AutoML_4_20250516_174035 model training\n",
      "\n",
      "‚ñà‚ñà‚ñà\n",
      "17:40:46.343: AutoML: starting GBM_3_AutoML_4_20250516_174035 model training\n",
      "\n",
      "‚ñà‚ñà\n",
      "17:40:50.586: AutoML: starting GBM_4_AutoML_4_20250516_174035 model training\n",
      "\n",
      "‚ñà‚ñà\n",
      "17:40:55.423: AutoML: starting XRT_1_AutoML_4_20250516_174035 model training\n",
      "17:40:58.280: New leader: XRT_1_AutoML_4_20250516_174035, rmse: 0.007280200625142804\n",
      "17:40:58.281: AutoML: starting GBM_5_AutoML_4_20250516_174035 model training\n",
      "\n",
      "‚ñà‚ñà\n",
      "17:41:03.325: AutoML: starting DeepLearning_1_AutoML_4_20250516_174035 model training\n",
      "\n",
      "‚ñà‚ñà‚ñà\n",
      "17:41:04.977: AutoML: starting GBM_grid_1_AutoML_4_20250516_174035 hyperparameter search\n",
      "17:41:07.558: New leader: GBM_grid_1_AutoML_4_20250516_174035_model_1, rmse: 0.007050857929995492\n",
      "17:41:07.558: No base models, due to timeouts or the exclude_algos option. Skipping StackedEnsemble 'monotonic'.\n",
      "17:41:07.559: AutoML: starting StackedEnsemble_BestOfFamily_1_AutoML_4_20250516_174035 model training\n",
      "\n",
      "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| (done) 100%\n",
      "\n",
      "17:41:08.45: New leader: StackedEnsemble_BestOfFamily_1_AutoML_4_20250516_174035, rmse: 0.004615243522413544\n",
      "17:41:08.45: AutoML: starting StackedEnsemble_AllModels_1_AutoML_4_20250516_174035 model training\n",
      "17:41:08.582: Actual modeling steps: [{GLM : [def_1 (1g, 10w)]}, {GBM : [def_5 (1g, 10w)]}, {DRF : [def_1 (2g, 10w)]}, {GBM : [def_2 (2g, 10w), def_3 (2g, 10w), def_4 (2g, 10w)]}, {DRF : [XRT (3g, 10w)]}, {GBM : [def_1 (3g, 10w)]}, {DeepLearning : [def_1 (3g, 10w)]}, {GBM : [grid_1 (4g, 60w)]}, {StackedEnsemble : [best_of_family_xglm (10g, 10w), all_xglm (10g, 10w)]}]\n",
      "17:41:08.582: AutoML build stopped: 2025.05.16 17:41:08.582\n",
      "17:41:08.582: AutoML build done: built 10 models\n",
      "17:41:08.582: AutoML duration: 33.379 sec\n",
      "\n",
      "[SUCCESS] Training complete. Best model: stackedensemble\n",
      "[INFO] Model saved at: C:\\Users\\Admin\\smart_qc_v2\\notebooks\\models\\StackedEnsemble_BestOfFamily_1_AutoML_4_20250516_174035\n",
      "\n",
      "[üìä] Full H2O Leaderboard:\n",
      "model_id                                                       rmse          mse          mae         rmsle    mean_residual_deviance\n",
      "StackedEnsemble_BestOfFamily_1_AutoML_4_20250516_174035  0.00461524  2.13005e-05  0.000331786    0.0116247                2.13005e-05\n",
      "StackedEnsemble_AllModels_1_AutoML_4_20250516_174035     0.00489576  2.39684e-05  0.000348781    0.00995388               2.39684e-05\n",
      "GBM_grid_1_AutoML_4_20250516_174035_model_1              0.00705086  4.97146e-05  0.000360709    0.0178692                4.97146e-05\n",
      "XRT_1_AutoML_4_20250516_174035                           0.0072802   5.30013e-05  0.000292506    0.0190067                5.30013e-05\n",
      "DRF_1_AutoML_4_20250516_174035                           0.00740497  5.48336e-05  0.000299171    0.019386                 5.48336e-05\n",
      "GLM_1_AutoML_4_20250516_174035                           0.00770535  5.93724e-05  0.000748982  nan                        5.93724e-05\n",
      "GBM_5_AutoML_4_20250516_174035                           0.00779708  6.07944e-05  0.000352315    0.019544                 6.07944e-05\n",
      "GBM_2_AutoML_4_20250516_174035                           0.00930457  8.6575e-05   0.00062077     0.0216869                8.6575e-05\n",
      "GBM_3_AutoML_4_20250516_174035                           0.00939552  8.82758e-05  0.000626759    0.0219351                8.82758e-05\n",
      "GBM_4_AutoML_4_20250516_174035                           0.00964994  9.31214e-05  0.000672599    0.0222888                9.31214e-05\n",
      "[12 rows x 6 columns]\n",
      "\n",
      "\n",
      "[‚úÖ] Evaluating best model performance on training data...\n",
      "‚Üí RMSE: 0.0031\n",
      "‚Üí MAE: 0.0002\n",
      "‚Üí R¬≤: 0.9697\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\anaconda3\\envs\\smartqc\\lib\\site-packages\\h2o\\frame.py:1983: H2ODependencyWarning: Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using multi-thread, install polars and pyarrow and use it as pandas_df = h2o_df.as_data_frame(use_multi_thread=True)\n",
      "\n",
      "  warnings.warn(\"Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Showing variable importance...\n",
      "[WARNING] Could not plot variable importance: Variable importance plot is not available for this type of model (stackedensemble).\n"
     ]
    }
   ],
   "source": [
    "from smartqc.automl_trainer import AutoMLTrainer\n",
    "\n",
    "trainer = AutoMLTrainer(X, y)  \n",
    "model, leaderboard, model_path = trainer.run()\n",
    "\n",
    "trainer.plot_shap_summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e0cb9ee3-e05d-41b4-9ed6-d33363041a53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Showing variable importance...\n",
      "[WARNING] Could not plot variable importance: Variable importance plot is not available for this type of model (stackedensemble).\n"
     ]
    }
   ],
   "source": [
    "trainer.plot_shap_summary()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (smartqc)",
   "language": "python",
   "name": "smartqc"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
