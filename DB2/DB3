-- ENUM 타입 정의
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'label_type_enum') THEN
        CREATE TYPE label_type_enum AS ENUM ('binary', 'bbox', 'mask');
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role_enum') THEN
        CREATE TYPE user_role_enum AS ENUM ('admin', 'worker');
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sensor_task_type_enum') THEN
        CREATE TYPE sensor_task_type_enum AS ENUM (
            'binary_classification',
            'multi_label',
            'binary_and_multi_label'
        );
    END IF;
END $$;

-- 시퀀스 생성
CREATE SEQUENCE IF NOT EXISTS image_upload_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS sensor_upload_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS image_model_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS sensor_model_seq START WITH 1 INCREMENT BY 1;

-- 테이블
-- 1. 기업 정보 
CREATE TABLE companies (
    company_id UUID PRIMARY KEY,
    company_name VARCHAR NOT NULL,
    address TEXT,
    industry VARCHAR,
    process VARCHAR
);

-- 2. 사용자
CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    company_id UUID REFERENCES companies(company_id),
    username VARCHAR NOT NULL,                   -- 사용자 이름 ex. 김노동
    password_hash VARCHAR NOT NULL,              -- 사용자 설정 PW
    department VARCHAR,                          -- 부서명 ex. AI 부서
    position VARCHAR,                            -- 직책/직급 ex. 총책임자
    role user_role_enum,                         -- 역할 worker / admin
    login_id VARCHAR UNIQUE,                     -- 사용자 설정 ID
    is_approved BOOLEAN DEFAULT FALSE,           -- Admin 승인 여부
    created_at TIMESTAMP DEFAULT now()           -- DB 생성 시간 
);

-- 3. 업로드 정보
CREATE TABLE uploads (
    upload_id VARCHAR(10) PRIMARY KEY,               -- ex. i1, i2, s1, s2
    company_id UUID REFERENCES companies(company_id),
    uploader_id UUID REFERENCES users(user_id),
    file_key TEXT NOT NULL,                          -- s3에 있는 폴더 경로 예: uploads/batch_29/
    has_target BOOLEAN DEFAULT FALSE,                -- Target 존재 여부 
    label_type label_type_enum,                      -- 이미지 
    task_type sensor_task_type_enum,                 -- 센서
    created_at TIMESTAMP DEFAULT now()
    CONSTRAINT check_label_or_task_type CHECK (
        (label_type IS NOT NULL AND task_type IS NULL) OR
        (task_type IS NOT NULL AND label_type IS NULL)
    )
);

-- 3. 트리거 함수: uploads의 upload_id 생성
CREATE OR REPLACE FUNCTION generate_upload_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.label_type IS NOT NULL THEN -- label_type이 있으면 i 생성
        NEW.upload_id = 'i' || nextval('image_upload_seq');
    ELSIF NEW.task_type IS NOT NULL THEN -- task_type이 있으면 s 생성
        NEW.upload_id = 's' || nextval('sensor_upload_seq');
    ELSE
        RAISE EXCEPTION 'label_type 또는 task_type이 필요합니다.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_generate_upload_id
BEFORE INSERT ON uploads
FOR EACH ROW
EXECUTE FUNCTION generate_upload_id();

-- 4. 센서 데이터
CREATE TABLE input_sensor_data (
    id SERIAL PRIMARY KEY,
    upload_id VARCHAR(10) REFERENCES uploads(upload_id),     
    timestamp TIMESTAMP,                             
    features JSONB,                                  -- 선택된 features  ex.{""Torque [Nm]"": 42.8, ""Tool wear [min]"": ...}
    created_at TIMESTAMP DEFAULT now()
);

-- 5. 센서 타겟
CREATE TABLE input_target (
    id SERIAL PRIMARY KEY,
    upload_id VARCHAR(10) REFERENCES uploads(upload_id),
    machine_failure BOOLEAN,                         -- machine failure 여부 True/False
    failure_modes JSONB,                             -- multi failure 여부 ex. {""HDF"": 0, ""OSF"": 0, ""PWF"": 0, ""RNF"": 0, ""TWF"": 0}
    created_at TIMESTAMP DEFAULT now()
);

-- --6. 이미지 데이터
CREATE TABLE input_image (
    id SERIAL PRIMARY KEY,
    upload_id VARCHAR(10) REFERENCES uploads(upload_id),
    image_path TEXT,                                  -- s3에서 각각 image 경로 
    width INT,                                                 
    height INT,
    format VARCHAR,                                   -- ex. png,jpg 등
    is_defect BOOLEAN,                                -- defect인지 여부(defect이면 False)
    created_at TIMESTAMP DEFAULT now()
);

-- 7. 모델 레지스트리 (활성 모델 관리 포함)
CREATE TABLE model_registry (
    id VARCHAR(10) PRIMARY KEY,             -- ex. i1, i2, s1, s2
    mlflow_run_id VARCHAR NOT NULL,
    trained_on_upload_id VARCHAR(10) REFERENCES uploads(upload_id),
    accuracy FLOAT,
    f1_score FLOAT,
    auc_score FLOAT,
    is_active BOOLEAN DEFAULT FALSE,      -- 현재 사용되는 model만 True 가 뜸 
    created_at TIMESTAMP DEFAULT now()
    CONSTRAINT trained_on_upload_id_not_null CHECK (trained_on_upload_id IS NOT NULL)
);

--7. 트리거 함수: model_registy의 id 생성
CREATE OR REPLACE FUNCTION generate_model_id()
RETURNS TRIGGER AS $$
DECLARE
    prefix CHAR(1);
BEGIN
    SELECT LEFT(upload_id, 1) INTO prefix
    FROM uploads
    WHERE upload_id = NEW.trained_on_upload_id;

    IF prefix = 'i' THEN  -- trained_in_upload_id가 i로 시작: i 
        NEW.id = 'i' || nextval('image_model_seq');
    ELSIF prefix = 's' THEN -- 앞이 s로 시작: s
        NEW.id = 's' || nextval('sensor_model_seq');
    ELSE
        RAISE EXCEPTION 'Invalid prefix for upload_id: %', NEW.trained_on_upload_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_generate_model_id
BEFORE INSERT ON model_registry
FOR EACH ROW
EXECUTE FUNCTION generate_model_id();

-- 8. 센서 예측 결과
CREATE TABLE prediction_result_sensor (
    id SERIAL PRIMARY KEY,
    upload_id VARCHAR(10) NOT NULL REFERENCES uploads(upload_id),
    model_id VARCHAR(10) REFERENCES model_registry(id),
    timestamp TIMESTAMP,
    predicted_failure BOOLEAN,                        -- failure 여부 에측 결과
    predicted_modes JSONB,                            -- predicted의 결과 여부
    shap_summary JSONB,
    created_at TIMESTAMP DEFAULT now(),
    tested_at TIMESTAMP
);

-- 9. 이미지 예측 결과
CREATE TABLE prediction_result_image (
    image_id INT PRIMARY KEY REFERENCES input_image(id),
    upload_id VARCHAR(10) NOT NULL REFERENCES uploads(upload_id),
    model_id VARCHAR(10) REFERENCES model_registry(id),
    gradcam_path TEXT NOT NULL,
    is_defect BOOLEAN NOT NULL,
    defect_probability FLOAT,
    created_at TIMESTAMP DEFAULT now(),
    tested_at TIMESTAMP
);

-- 10. Time Batch Cycle (센서 불량 주기)
CREATE TABLE time_batch_cycle (
    id SERIAL PRIMARY KEY,
    upload_id VARCHAR(10) REFERENCES uploads(upload_id),
    batch_interval_minutes INT NOT NULL,           -- 예: 60분 단위 주기
    detected_from TIMESTAMP,                       -- 이 주기의 적용 시작 시점
    created_at TIMESTAMP DEFAULT now()
);

-- 11. Feature Engineering 공식 테이블
CREATE TABLE feat_formula (
    id SERIAL PRIMARY KEY,
    source_upload_id VARCHAR(10) REFERENCES uploads(upload_id),
    feature_name VARCHAR NOT NULL,                 -- 예: 'temp_pressure_ratio'
    formula TEXT NOT NULL,                         -- 예: 'temperature / pressure'
    created_at TIMESTAMP DEFAULT now()
);

-- 12. Retrain_schedule_log (모델 재학습 스케쥴 로그)
CREATE TABLE retrain_schedule_log (
    id SERIAL PRIMARY KEY,
    model_id VARCHAR(10) REFERENCES model_registry(id),              -- 재학습 기준이 된 모델
    triggered_at TIMESTAMP DEFAULT now(),                    -- 트리거된 시점
    scheduled_for TIMESTAMP,                                 -- 재학습 예정 시각
    completed_at TIMESTAMP,                                  -- 재학습 완료 시각
    was_model_updated BOOLEAN,                               -- 모델이 교체되었는지 여부
    comments TEXT
);

-- 13. Model_selection_log
CREATE TABLE model_selection_log (
    id SERIAL PRIMARY KEY,
    old_model_id VARCHAR(10) REFERENCES model_registry(id),          -- 기존 모델 (is_active = TRUE인 것)
    new_model_id VARCHAR(10) REFERENCES model_registry(id),          -- 새로운 후보 모델
    accuracy_diff FLOAT,                                     -- 정확도 차이
    f1_score_diff FLOAT,
    auc_score_diff FLOAT, 
    selected_by_user_id UUID REFERENCES users(user_id),      -- 수락/거절한 사용자
    was_accepted BOOLEAN,                                    -- 수락 여부
    reason TEXT,                                              -- 수락/거절 사유 (자유 입력)
    selected_at TIMESTAMP DEFAULT now()
);

--14. alarm_event_log (불량 alarm trigger 발동 관련)
CREATE TABLE alarm_event_log (
    event_id SERIAL PRIMARY KEY,                            -- 알람 식별자 (자동 증가 ID)
    upload_id VARCHAR(10) REFERENCES uploads(upload_id),    -- i1/s2 형식: 데이터 유형 구분 가능
    data_id INT NOT NULL,                                   -- input_image.id 또는 input_sensor_data.id
    model_id VARCHAR(10) REFERENCES model_registry(id),     -- 어떤 모델이 이 알람을 발생시켰는지 추적
    is_defect BOOLEAN NOT NULL,                             -- 모델이 예측한 라벨 (불량=False)
    final_label BOOLEAN,                                    -- 사용자 판단에 따른 실제 라벨 입력
    was_corrected BOOLEAN GENERATED ALWAYS AS (             -- 예측값과 실제값이 다른 경우 True
        is_defect IS DISTINCT FROM final_label
    ) STORED,
    reviewer_id UUID REFERENCES users(user_id),             -- 리뷰한 사용자 ID (누가 확인했는지)
    review_comment TEXT,                                    -- 정정 사유, 설명 (선택 필드, NULL 가능)
    alarm_triggered_at TIMESTAMP DEFAULT now(),             -- 알람 최초 발생 시각 (예: 모델 예측 시점)
    review_completed_at TIMESTAMP,                          -- 사람이 검토를 마친 시각
    review_status VARCHAR DEFAULT 'pending'                 -- 검토 상태: 대시보드 필터링용
        CHECK (review_status IN ('pending', 'completed'))
);

-- 인덱스 최적화
CREATE INDEX idx_uploads_company ON uploads(company_id);
CREATE INDEX idx_sensor_upload ON input_sensor_data(upload_id);
CREATE INDEX idx_image_upload ON input_image(upload_id);
CREATE INDEX idx_target_upload ON input_target(upload_id);
CREATE INDEX idx_model_id ON model_registry(id);
CREATE INDEX idx_alarm_event_upload_id ON alarm_event_log(upload_id);
CREATE INDEX idx_alarm_event_data_id ON alarm_event_log(data_id);
CREATE INDEX idx_alarm_event_model_id ON alarm_event_log(model_id);
CREATE INDEX idx_alarm_event_reviewer_id ON alarm_event_log(reviewer_id);

-- 테스트 데이터 삽입
INSERT INTO companies (company_id, company_name)
VALUES ('11111111-1111-1111-1111-111111111111', 'Test Company')
ON CONFLICT DO NOTHING;

INSERT INTO users (
    user_id, company_id, username, password_hash,
    department, position, role, is_approved, login_id
) VALUES (
    '22222222-2222-2222-2222-222222222222',
    '11111111-1111-1111-1111-111111111111',
    'test_user',
    'hashedpassword123',
    'AI Team',
    'manager',
    'worker',
    TRUE,
    'test_user_01'
);
