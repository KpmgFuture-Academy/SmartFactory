-- 1.ENUM 타입 
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'data_type') THEN
        CREATE TYPE data_type AS ENUM ('sensor_csv', 'image');
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'label_type_enum') THEN
        CREATE TYPE label_type_enum AS ENUM ('binary', 'bbox', 'mask');
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role_enum') THEN
        CREATE TYPE user_role_enum AS ENUM ('admin', 'worker');
    END IF;
END $$;

--2.companies
CREATE TABLE companies (
    company_id UUID PRIMARY KEY,
    company_name VARCHAR NOT NULL,
    address TEXT,
    industry VARCHAR,
    process VARCHAR
);

--3.users
CREATE TABLE users (
    user_id UUID PRIMARY KEY,
    company_id UUID REFERENCES companies(company_id),
    username VARCHAR NOT NULL,
    password_hash VARCHAR NOT NULL,
    department VARCHAR,
    role user_role_enum,
    is_approved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT now()
);

--4.uploads
CREATE TABLE uploads (
    upload_id SERIAL PRIMARY KEY,
    company_id UUID REFERENCES companies(company_id),
    uploader_id UUID REFERENCES users(user_id),
    file_key TEXT NOT NULL,                -- S3 key
    file_type data_type NOT NULL,          -- sensor_csv / image
    has_target BOOLEAN DEFAULT FALSE,      -- True if user selected target
    label_type label_type_enum,            -- 이미지용 only
    created_at TIMESTAMP DEFAULT now()
);

--5.input_sensor_data
CREATE TABLE input_sensor_data (
    id SERIAL PRIMARY KEY,
    upload_id INT REFERENCES uploads(upload_id),
    timestamp TIMESTAMP,
    features JSONB,
    created_at TIMESTAMP DEFAULT now()
);

-- ENUM 타입 생성
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sensor_task_type_enum') THEN
        CREATE TYPE sensor_task_type_enum AS ENUM (
            'binary_classification',
            'multi_label',
            'binary_and_multi_label'
        );
    END IF;
END $$;

-- 새 컬럼 생성 (ENUM 타입으로)
ALTER TABLE uploads
ADD COLUMN task_type sensor_task_type_enum;

--6.input_image
CREATE TABLE input_image (
    id SERIAL PRIMARY KEY,                          -- 각 image에 대한 id 생성되는 것 (PK)
    upload_id INT REFERENCES uploads(upload_id),    -- 배치 단위로 같은 번호 부여됨
    image_path TEXT,                                -- S3의 path
    width INT,                                      -- PIL로 확인 가능 (height도 동일)
    height INT,
    format VARCHAR,                                 -- JPEG인지, PNG 등
    created_at TIMESTAMP DEFAULT now()              -- DB 적재 당시 시간
);

ALTER TABLE input_image
ADD COLUMN is_defect BOOLEAN;  -- 정상(True), 불량(False) 여부

--7.input_target(센서에 대한 것)
CREATE TABLE input_target (
    id SERIAL PRIMARY KEY,
    upload_id INT REFERENCES uploads(upload_id),
    machine_failure BOOLEAN,
    failure_modes JSONB,
    created_at TIMESTAMP DEFAULT now()
);

--8.prediction_result
CREATE TABLE prediction_result (
    id SERIAL PRIMARY KEY,
    upload_id INT REFERENCES uploads(upload_id),
    company_id UUID REFERENCES companies(company_id),
    timestamp TIMESTAMP,
    predicted_failure BOOLEAN,
    predicted_modes JSONB,
    anomaly_score FLOAT,
    shap_summary JSONB,
    has_image_result BOOLEAN,
    model_version VARCHAR,
    source_type VARCHAR CHECK (source_type IN ('upload', 'realtime')),
    created_at TIMESTAMP DEFAULT now()
);

DROP TABLE IF EXISTS prediction_result CASCADE;

CREATE TABLE prediction_result_sensor (
    id SERIAL PRIMARY KEY,
    upload_id INT NOT NULL REFERENCES uploads(upload_id),   -- 예측 수행 대상 배치
    model_id INT REFERENCES model_registry(id),             -- 사용된 모델
    timestamp TIMESTAMP,                                    -- 예측 시점 (센서의 time point)
    predicted_failure BOOLEAN,                              -- 예측 클래스
    predicted_modes JSONB,                                  -- 다중 고장 모드 예측 결과
    anomaly_score FLOAT,                                    -- 이상 점수
    shap_summary JSONB,                                     -- SHAP 등 해석 정보
    created_at TIMESTAMP DEFAULT now(),                     -- DB 저장 시점
    tested_at TIMESTAMP                                     -- 모델 실제 추론 수행 시점
);

--9.prediction_image_result
CREATE TABLE prediction_image_result (
    id SERIAL PRIMARY KEY,
    prediction_id INT REFERENCES prediction_result(id),
    bbox_result JSONB,
    mask_path TEXT,
    anomaly_map_path TEXT,
    created_at TIMESTAMP DEFAULT now()
);

DROP TABLE IF EXISTS prediction_image_result CASCADE;

--10.model_registry
CREATE TABLE model_registry (
    id SERIAL PRIMARY KEY,
    mlflow_run_id VARCHAR,
    model_name VARCHAR,
    version VARCHAR,
    industry VARCHAR,
    process VARCHAR,
    task_type VARCHAR,
    company_id UUID REFERENCES companies(company_id),
    path TEXT,
    f1_score FLOAT,
    auc_score FLOAT,
    accuracy FLOAT,
    trained_on_upload_id INT, -- 연결된 학습 데이터
    retrain_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT now()
);

DROP TABLE IF EXISTS model_registry CASCADE;

CREATE TABLE model_registry (
    id SERIAL PRIMARY KEY,
    model_name VARCHAR,                         -- 예: 'autokeras_v1', 'lstm_sensor_v2'
    version VARCHAR,                            -- 예: 'v1.0', '20240520_001'
    mlflow_run_id VARCHAR,                      -- MLflow에서 고유하게 모델 추적
    trained_on_upload_id INT REFERENCES uploads(upload_id), -- 학습에 사용된 데이터 배치
    company_id UUID REFERENCES companies(company_id),       -- 소속 회사 정보

    -- 모델 전체 성능 메트릭
    f1_score FLOAT,
    auc_score FLOAT,
    accuracy FLOAT,
    
    created_at TIMESTAMP DEFAULT now()
);

--12.index
CREATE INDEX idx_uploads_company ON uploads(company_id);
CREATE INDEX idx_sensor_upload ON input_sensor_data(upload_id);
CREATE INDEX idx_image_upload ON input_image(upload_id);
CREATE INDEX idx_target_upload ON input_target(upload_id);
CREATE INDEX idx_result_upload ON prediction_result(upload_id);
CREATE INDEX idx_model_company ON model_registry(company_id);


-- 테스트 생성
INSERT INTO companies (company_id, company_name)
VALUES ('11111111-1111-1111-1111-111111111111', 'Test Company')
ON CONFLICT DO NOTHING;

-- 사용자 등록
INSERT INTO users (
    user_id,
    company_id,
    username,
    password_hash,
    department,
    role,
    is_approved
) VALUES (
    '22222222-2222-2222-2222-222222222222',
    '11111111-1111-1111-1111-111111111111',
    'test_user',
    'hashedpassword123',
    'AI Team',
    'user',  -- 'admin' or 'user' or others depending on your enum
    TRUE
);

ALTER TYPE user_role_enum ADD VALUE IF NOT EXISTS 'user';
ALTER TYPE user_role_enum ADD VALUE IF NOT EXISTS 'admin';
ALTER TABLE users ADD COLUMN login_id VARCHAR UNIQUE;

-- 예측결과
CREATE TABLE prediction_result_image (
    image_id INT PRIMARY KEY REFERENCES input_image(id),   -- input_image.id = prediction_result_image.image_id
    upload_id INT NOT NULL REFERENCES uploads(upload_id),  -- 같은 업로드 배치 단위로 연결
    gradcam_path TEXT NOT NULL,                            -- GradCAM 이미지 S3 경로
    is_defect BOOLEAN NOT NULL,                            -- 불량 여부
    defect_probability FLOAT,                              -- 불량 확률
    created_at TIMESTAMP DEFAULT now(),                    -- DB 삽입 시각
    tested_at TIMESTAMP                                    -- 모델 테스트 수행 시각 (Python에서 전달)
);

DROP TABLE IF EXISTS prediction_result_image CASCADE;

CREATE TABLE prediction_result_image (
    image_id INT PRIMARY KEY REFERENCES input_image(id),  -- 개별 이미지 기준
    upload_id INT NOT NULL REFERENCES uploads(upload_id), -- 예측 수행 대상 배치
    model_id INT REFERENCES model_registry(id),           -- 사용된 모델
    gradcam_path TEXT NOT NULL,                           -- S3에 저장된 GradCAM 결과
    is_defect BOOLEAN NOT NULL,                           -- 예측 클래스 (불량/정상)
    defect_probability FLOAT,                             -- 예측 확률 (0~1)
    created_at TIMESTAMP DEFAULT now(),                   -- DB 저장 시점
    tested_at TIMESTAMP                                   -- 모델 실제 추론 수행 시점
);
