mlflow server --host 0.0.0.0 --port 5000

# 샘플 데이터로 
import os
import io
import boto3
import psycopg2
import numpy as np
import pandas as pd
from PIL import Image
from datetime import datetime
from tqdm import tqdm
import tensorflow as tf
import autokeras as ak
import mlflow
import mlflow.keras
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, roc_auc_score

# ------------------------- 설정 -------------------------
여기에 AWS ACCESS key, DB 정보 넣기 

s3 = boto3.client("s3", aws_access_key_id=AWS_ACCESS_KEY, aws_secret_access_key=AWS_SECRET_KEY)

def fetch_sampled_images(upload_id, sample_size):
    print(f"\n🟢 DB에서 upload_id={upload_id} 데이터 로딩 중")
    conn = psycopg2.connect(**DB_INFO)
    df = pd.read_sql("""
        SELECT id AS image_id, image_path, is_defect
        FROM input_image
        WHERE upload_id = %s
    """, conn, params=(upload_id,))
    present_classes = set(df["is_defect"].unique())
    if len(present_classes) < 2:
        missing_class = 1 if 0 in present_classes else 0
        print(f"⚠️ 클래스 {missing_class} 보완을 위해 DB에서 추가 조회")
        df_add = pd.read_sql(f"""
            SELECT id AS image_id, image_path, is_defect
            FROM input_image
            WHERE is_defect = {missing_class} AND upload_id != %s
            ORDER BY RANDOM()
            LIMIT 10
        """, conn, params=(upload_id,))
        df = pd.concat([df, df_add], ignore_index=True)
    conn.close()
    if df.empty:
        raise ValueError(f"❌ upload_id {upload_id}에 해당하는 이미지가 없습니다.")
    df_sampled = df.sample(n=min(sample_size, len(df)), random_state=42).reset_index(drop=True)
    print(f"✅ 샘플링 완료: {len(df_sampled)}개 (두 클래스 포함됨)")
    x, y = [], []
    for _, row in tqdm(df_sampled.iterrows(), total=len(df_sampled), desc="📦 이미지 로딩"):
        try:
            key = row["image_path"]
            label = int(row["is_defect"])
            obj = s3.get_object(Bucket=BUCKET_NAME, Key=key)
            img = Image.open(io.BytesIO(obj["Body"].read())).convert("RGB").resize(image_size)
            x.append(np.array(img) / 255.0)
            y.append(label)
        except Exception as e:
            print(f"⚠️ {key} → {e}")
    return np.array(x, dtype=np.float32), np.array(y, dtype=np.int32)

def train_and_log_model(upload_id):
    x, y = fetch_sampled_images(upload_id, sample_size)
    if len(np.unique(y)) < 2:
        raise ValueError("❌ 클래스가 하나만 존재합니다. 최소 두 클래스가 필요합니다.")
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=42)
    clf = ak.ImageClassifier(overwrite=True, max_trials=1)
    clf.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))
    from sklearn.metrics import accuracy_score, f1_score, roc_auc_score
    try:
        y_pred_probs = clf.predict_proba(x_test)
    except AttributeError:
        y_pred_probs = clf.predict(x_test)
        print("⚠️ predict_proba가 없음. predict 사용. 확률 출력으로 변환:")
        y_pred_probs = y_pred_probs.flatten()  # (n_samples, 1) → (n_samples,)
    y_pred = np.round(y_pred_probs).astype(int).flatten()
    try:
        accuracy = accuracy_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred, average='binary', zero_division=0)
        n_classes = len(np.unique(y_test))
        if n_classes < 2:
            auc = 0.0
        else:
            auc = roc_auc_score(y_test, y_pred_probs)
        print(f"Accuracy: {accuracy:.4f}")
        print(f"F1-Score: {f1:.4f}")
        print(f"AUC: {auc:.4f}")
    except Exception as e:
        print(f"⚠️ 지표 계산 실패: {e}")
        print(f"디버깅 정보 - y_test: {np.unique(y_test, return_counts=True)}")
        print(f"디버깅 정보 - y_pred_probs shape: {y_pred_probs.shape}")
        accuracy, f1, auc = 0.0, 0.0, 0.0
    model = clf.export_model()
    mlflow.set_tracking_uri("http://localhost:5000")
    mlflow.set_experiment("SmartFactory_Image_Models")
    with mlflow.start_run() as run:
        mlflow.keras.log_model(model, "model")
        mlflow.log_metrics({"accuracy": accuracy, "f1_score": f1, "auc_score": auc})
        mlflow_run_id = run.info.run_id
        model_name = run.info.run_name
        version = datetime.now().strftime("v%Y%m%d_%H%M%S")
        conn = psycopg2.connect(**DB_INFO)
        cur = conn.cursor()
        cur.execute('''
            INSERT INTO model_registry (
                model_name, version, mlflow_run_id,
                trained_on_upload_id, data_type,
                accuracy, f1_score, auc_score,
                is_active, created_at
            ) VALUES (%s, %s, %s, %s, 'image', %s, %s, %s, TRUE, NOW())
        ''', (model_name, version, mlflow_run_id, upload_id, accuracy, f1, auc))
        conn.commit()
        cur.close()
        conn.close()
        print(f"✅ 모델 등록 완료: {model_name}, version={version}, Run ID={mlflow_run_id}")

if __name__ == "__main__":
    upload_id = 1
    train_and_log_model(upload_id)
